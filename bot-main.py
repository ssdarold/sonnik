# -*- coding: utf-8 -*-
import openai
import asyncio
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.storage import FSMContextProxy
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import sqlite3
import datetime
import pytz
from yookassa import Configuration, Payment
import time
import uuid
import requests

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
local_timezone = pytz.timezone('Europe/Moscow')

openai.api_key = ""
model_engine = "text-davinci-003"

YUKASSA_SECRET_KEY = ""
YUKASSA_SHOP_ID = ""


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="", proxy="http://proxy.server:3128")
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())




# ================ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==============

buy_button = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_limits")
get_dream_button = types.InlineKeyboardButton(text="–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–æ–Ω", callback_data="get_dream")
get_limits_button = types.InlineKeyboardButton(text="–û—Å—Ç–∞—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="get_limits")
set_alarm_button = types.InlineKeyboardButton(text="–ë—É–¥–∏–ª—å–Ω–∏–∫", callback_data="set_alarm")
send_review_button = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="send_review")

# ================ –ö–æ–Ω–µ—Ü –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==============


# ================ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==============

cancel_button = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cancel")

# ================ –ö–æ–Ω–µ—Ü –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==============


# ================ –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ ==============

promocode_button = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ-–∫–æ–¥", callback_data="promocode")
promocode_restart_button = types.InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="promocode")

# ================ –ö–æ–Ω–µ—Ü –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ ==============


#–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
def getPromocode(user_id, codeName):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("check_dream.db")
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    promoCodeMarkup = types.InlineKeyboardMarkup()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ main_promocode
    cursor.execute("SELECT * FROM main_promocode WHERE codeName=?", (codeName,))
    promo_row = cursor.fetchone()

    if promo_row is None:
        # –ü—Ä–æ–º–æ-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        response = "–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        promoCodeMarkup.add(promocode_restart_button)
        promoCodeMarkup.add(cancel_button)

    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
        isActive = promo_row[3]
        if isActive:
            # –ü—Ä–æ–º–æ-–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            response = f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥ <b>{codeName}</b> —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ"
            promoCodeMarkup.add(promocode_restart_button)
            promoCodeMarkup.add(cancel_button)
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ-–∫–æ–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            limits = promo_row[2]
            cursor.execute("UPDATE main_promocode SET isActive = 1, userID=? WHERE codeName=?", (user_id, codeName,))
            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ limits
            cursor.execute("SELECT * FROM limits WHERE user_id=?", (user_id,))
            user_limits = cursor.fetchone()

            if user_limits is None:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü–µ limits
                cursor.execute("INSERT INTO limits (user_id, promo_limits) VALUES (?, ?)", (user_id, limits))
                conn.commit()

                response = f"–ü—Ä–æ–º–æ-–∫–æ–¥ <b>{codeName}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - <b>{limits}</b>"
                promoCodeMarkup.add(get_dream_button)
                promoCodeMarkup.add(cancel_button)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                promo_limits = user_limits[5] + limits
                cursor.execute("UPDATE limits SET promo_limits=? WHERE user_id=?", (promo_limits, user_id))
                conn.commit()

                response = f"–ü—Ä–æ–º–æ-–∫–æ–¥ <b>{codeName}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - <b>{promo_limits}</b>"

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    return bot.send_message(user_id, response, reply_markup=promoCodeMarkup, parse_mode="HTML")


# –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_hello_to_user():

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    now = datetime.datetime.now(local_timezone)
    nowTime = now.strftime("%H:%M")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('check_dream.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã notifications —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    cursor.execute("SELECT user_id, notification_type FROM notifications WHERE time = ?", (nowTime,))
    rows = cursor.fetchall()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    get_dream_markup = types.InlineKeyboardMarkup()
    get_dream_button = types.InlineKeyboardButton(text="–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–æ–Ω", callback_data="get_dream")
    get_dream_markup.add(get_dream_button)

    for user_id, notification_type in rows:
        if notification_type == 'morning':
            message = "üåï –°–æ–ª–Ω—Ü–µ —É–∂–µ –≤–∑–∞—à–ª–æ! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ —ç—Ç–∞ –Ω–æ—á—å? "
            await bot.send_message(user_id, message, reply_markup=get_dream_markup)
        elif notification_type == 'evening':
            message = "üåë –î–æ–±—Ä–æ–π –Ω–æ—á–∏ –∏ –≤–æ–ª—à–µ–±–Ω—ã—Ö —Å–Ω–æ–≤. –ü—É—Å—Ç—å –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç —Ç–≤–æ–∏–º–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞–º–∏ –≤ –º–∏—Ä–µ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π."
            await bot.send_message(user_id, message, reply_markup=get_dream_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_user_limits(user_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('check_dream.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM limits WHERE user_id = ?", (user_id,))
    existing_row = cursor.fetchone()

    if existing_row:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º promo_limits
        promo_limits = existing_row[5]
        if promo_limits > 0:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ promo_limits –Ω–∞ 1
            cursor.execute("UPDATE limits SET promo_limits = ? WHERE user_id = ?", (promo_limits - 1, user_id))

        else:
            # –ï—Å–ª–∏ promo_limits –ø—É—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            free_limits = existing_row[2]
            if free_limits > 0:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ 1
                cursor.execute("UPDATE limits SET free_limits = ? WHERE user_id = ?", (free_limits - 1, user_id))

            else:
                # –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
                payed_limits = existing_row[3]
                if payed_limits > 0:
                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ 1
                    cursor.execute("UPDATE limits SET payed_limits = ? WHERE user_id = ?", (payed_limits - 1, user_id))
                else:
                    end_limits_markup = types.InlineKeyboardMarkup()
                    end_limits_markup.add(buy_button)

                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏ –ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–µ
                    await bot.send_message(user_id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ.", reply_markup=end_limits_markup)
                    conn.close()
                    return False

    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        current_date = datetime.datetime.now().date()
        cursor.execute("INSERT INTO limits (user_id, free_limits, payed_limits, first_input_date) VALUES (?, ?, ?, ?)",
               (user_id, 2, 0, current_date))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()

    return True

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class TimeInput(StatesGroup):
    waiting_for_time = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class EveningTimeInput(StatesGroup):
    waiting_for_time = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–Ω–∞
class MainMessageInput(StatesGroup):
    waiting_for_dream = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
class ReviewInput(StatesGroup):
    waiting_for_review = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
class ConfirmAction(StatesGroup):
    waiting_for_confirm = State()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
class PromoCodeInput(StatesGroup):
    waiting_for_code = State()



#MiddleWare –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FinishStateMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        if message.is_command():
            state = dp.current_state(chat=message.from_user.id, user=message.from_user.id)
            async with state.proxy() as proxy:
                if proxy.state:
                    await state.finish()

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.middleware.setup(FinishStateMiddleware())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_notifications_exist(user_id):
    conn = sqlite3.connect('check_dream.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM notifications WHERE user_id = ?", (user_id,))
    existing_rows = cursor.fetchall()

    conn.close()

    return len(existing_rows) > 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –±—É–¥–∏–ª—å–Ω–∏–∫–µ
def get_notification_times(user_id):
    conn = sqlite3.connect("check_dream.db")
    cursor = conn.cursor()

    cursor.execute("SELECT time FROM notifications WHERE user_id = ? AND notification_type = 'morning'", (user_id,))
    morning_time = cursor.fetchone()

    cursor.execute("SELECT time FROM notifications WHERE user_id = ? AND notification_type = 'evening'", (user_id,))
    evening_time = cursor.fetchone()

    conn.close()

    return [morning_time[0], evening_time[0]] if morning_time and evening_time else []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_notifications(userId, time_input, notification_type):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('check_dream.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT * FROM notifications WHERE user_id = ? AND notification_type = ?", (userId,notification_type,))
        existing_row = cursor.fetchone()

        if existing_row:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            update_query = "UPDATE notifications SET time = ? WHERE user_id = ? AND notification_type = ?"
            cursor.execute(update_query, (time_input, userId, notification_type))
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            insert_query = "INSERT INTO notifications (user_id, notification_type, time) VALUES (?, ?, ?)"
            cursor.execute(insert_query, (userId, notification_type, time_input))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
confirm_kb = types.InlineKeyboardMarkup(row_width=2)
confirm_yes_btn = types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes")
confirm_no_btn = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no")
confirm_kb.add(confirm_yes_btn, confirm_no_btn)

# Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
after_delete_kb = types.InlineKeyboardMarkup(row_width=2)
set_alarm_btn = types.InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", callback_data="set_alarm")
after_delete_kb.add(set_alarm_btn, cancel_button)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–º–æ-–∫–æ–¥–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data == "promocode")
async def set_code(callback_query: types.CallbackQuery):
    wait_promocode_markup = types.InlineKeyboardMarkup().add(cancel_button)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=wait_promocode_markup)
    await PromoCodeInput.waiting_for_code.set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_review
@dp.message_handler(state=PromoCodeInput.waiting_for_code, content_types=types.ContentTypes.TEXT)
async def process_promocode(message: types.Message, state: FSMContext):
    #–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
    await getPromocode(message.from_user.id, message.text)

    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
@dp.callback_query_handler(lambda callback_query: callback_query.data == "del_notifications")
async def delete_notifications(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫–∞?", reply_markup=confirm_kb)
    await ConfirmAction.waiting_for_confirm.set()
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data in ["confirm_yes", "confirm_no"], state=ConfirmAction.waiting_for_confirm)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if callback_query.data == "confirm_yes":
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('check_dream.db')
            cursor = conn.cursor()

            # –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = callback_query.from_user.id
            cursor.execute("DELETE FROM notifications WHERE user_id = ?", (user_id,))
            conn.commit()
            conn.close()

            await callback_query.message.answer("–í—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –≤–∞—Å —É–¥–∞–ª–µ–Ω—ã. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=after_delete_kb)
        elif callback_query.data == "confirm_no":
            await callback_query.message.delete()

    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
@dp.callback_query_handler(lambda callback_query: callback_query.data == "send_review")
async def set_review(callback_query: types.CallbackQuery):
    review_markup = types.InlineKeyboardMarkup().add(cancel_button)
    await callback_query.message.answer("–ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ", reply_markup=review_markup)
    await ReviewInput.waiting_for_review.set() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_review
@dp.message_handler(state=ReviewInput.waiting_for_review, content_types=types.ContentTypes.TEXT)
async def process_review(message: types.Message, state: FSMContext):
    review_text = message.text
    result_review_markup = types.InlineKeyboardMarkup().add(cancel_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –º–µ—Ç–æ–¥–æ–º POST
    try:
        response = requests.post("http://moy-drug.ru/return_handler.php", data={"text": review_text})
        if response.status_code == 200:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=result_review_markup)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=result_review_markup)
    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=result_review_markup)

    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data == "set_alarm")
async def cmd_set_morning(query: types.CallbackQuery):

    # markup –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –±—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    alarm_markup = types.InlineKeyboardMarkup(row_width=2)
    next_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="alarm_next")
    delete_alarm_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫", callback_data="del_notifications")
    alarm_markup.add(next_button)
    alarm_markup.add(delete_alarm_button)
    alarm_markup.add(cancel_button)

    # markup –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –±—É–¥–∏–ª—å–Ω–∏–∫ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    no_alarm_markup = types.InlineKeyboardMarkup(row_width=2)
    no_next_button = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="alarm_next")
    no_alarm_markup.add(no_next_button)
    no_alarm_markup.add(cancel_button)

    if check_notifications_exist(query.from_user.id):

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –±—É–¥–∏–ª—å–Ω–∏–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.message.answer(f"‚è∞ –£ —Ç–µ–±—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—É–¥–∏–ª—å–Ω–∏–∫. –Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ <b>{get_notification_times(query.from_user.id)[0]}</b> –∏ –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –≤ <b>{get_notification_times(query.from_user.id)[1]}</b>", reply_markup=alarm_markup, parse_mode="HTML")

    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –±—É–¥–∏–ª—å–Ω–∏–∫ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.message.answer("‚è∞ –ü–æ–∂–µ–ª–∞—é —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤ –∏ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞", reply_markup=no_alarm_markup)

@dp.callback_query_handler(lambda callback_query: callback_query.data == "alarm_next")
async def cmd_start(callback_query: types.CallbackQuery):
    await callback_query.message.answer("""üåå –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –∑–∞—Å—ã–ø–∞–µ—à—å? –£–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 22:30) """)
    await EveningTimeInput.waiting_for_time.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: validate_time(message.text.strip()), state=EveningTimeInput.waiting_for_time)
async def process_evening_valid(message: types.Message, state: FSMContext):
    evening_time_input = message.text.strip()
    userId = message.from_user.id
    save_notifications(userId, evening_time_input, "evening")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ data —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —é–∑–µ—Ä
    async with state.proxy() as data:
        data['evening_time_input'] = evening_time_input

    await message.answer("""üåÖ –ê –≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? –£–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 8:30)""")
    await TimeInput.waiting_for_time.set()   # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: not validate_time(message.text.strip()), state=EveningTimeInput.waiting_for_time)
async def process_evening_invalid(message: types.Message):
    cancel_markup = types.InlineKeyboardMarkup(row_width=2)
    cancel_markup.add(cancel_button)
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00).", reply_markup=cancel_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: validate_time(message.text.strip()), state=TimeInput.waiting_for_time)
async def process_morning_valid(message: types.Message, state: FSMContext):
    morning_time_input = message.text.strip()
    userId = message.from_user.id
    save_notifications(userId, morning_time_input, "morning")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ data —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —é–∑–µ—Ä
    async with state.proxy() as data:
        data['morning_time_input'] = morning_time_input

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        morning_time_input = data['morning_time_input']
        evening_time_input = data['evening_time_input']

        next_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="alarm_next")

        alarm_success_markup = types.InlineKeyboardMarkup()
        alarm_success_markup.add(next_button)
        alarm_success_markup.add(cancel_button)

        await message.answer(f"üîî –¢–≤–æ–π –±—É–¥–∏–ª—å–Ω–∏–∫ –≥–æ—Ç–æ–≤.  –Ø –±—É–¥—É —Ç–≤–æ–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —É—Ç—Ä–æ–º –≤ <b>{morning_time_input}</b> –∏ –≤–µ—á–µ—Ä–æ–º –≤ <b>{evening_time_input}</b>", reply_markup=alarm_success_markup, parse_mode="HTML")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: not validate_time(message.text.strip()), state=TimeInput.waiting_for_time)
async def process_morning_invalid(message: types.Message):
    cancel_markup = types.InlineKeyboardMarkup(row_width=2)
    cancel_markup.add(cancel_button)
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00).", reply_markup=cancel_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(lambda query: query.data == "cancel", state="*")
async def cancel_state(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    main_menu_kb = types.InlineKeyboardMarkup(row_width=2)
    main_menu_kb.add(
        get_dream_button, buy_button, get_limits_button, set_alarm_button, send_review_button
    )
    await query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb)
    await query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda query: query.data == "cancel_payment", state="*")
async def cancel_state(query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    global active_tasks
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    for task in active_tasks:
        task.cancel()
    active_tasks.clear()

    main_menu_kb = types.InlineKeyboardMarkup(row_width=2)
    main_menu_kb.add(
        get_dream_button, buy_button, get_limits_button, set_alarm_button, send_review_button
    )
    await query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb)
    await query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        get_dream_button, buy_button, get_limits_button, set_alarm_button, send_review_button
    )

    await message.reply("""üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π! üåô

–¢—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–µ–º —Å–Ω–µ, –∏ —è, –°–æ–Ω–Ω–∏–∫, –ø–æ–º–æ–≥—É —Ä–∞—Å–∫—Ä—ã—Ç—å –µ–≥–æ —Å–º—ã—Å–ª.

–ù–µ —É–ø—É—Å–∫–∞–π –¥–µ—Ç–∞–ª–∏ ‚Äî –æ–Ω–∏ –≤–∞–∂–Ω—ã. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ /help""", reply_markup=kb)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):

    cancel_markup = types.InlineKeyboardMarkup().add(cancel_button)

    await message.reply("""‚ú® <b>–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –ø–æ –º–∏—Ä—É —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π</b>

–í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–Ω–æ–≤ –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —ç—Ç–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:

<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å</b>: –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—Å–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ

<b>–≠–º–æ—Ü–∏–∏</b>: –ß—É–≤—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —Ç—ã –≥—Ä—É—Å—Ç—å, —Ä–∞–¥–æ—Å—Ç—å? –ê –º–æ–∂–µ—Ç —Å—Ç—Ä–∞—Ö?

<b>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>: –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–æ–Ω –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ

<b>–°–∏–º–≤–æ–ª—ã</b>: –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤—ã–¥–µ–ª—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏


üíé <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –°–æ–Ω–Ω–∏–∫–∞</b>

–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∑–Ω–∞–Ω–∏—è—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–º–Ω–æ–ª–æ–≥–æ–≤

–¢–æ—á–Ω–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤

–£—á–µ—Ç –∏–Ω–¥–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π

–ü—Ä—è–º–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–µ–∫—Å—Ç–∞ –∏ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏



ü™Ñ <b>3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü</b>""", parse_mode='HTML', reply_markup=cancel_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è payed_limits –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def update_payed_limits(user_id, package_price):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('check_dream.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ payed_limits
    cursor.execute("SELECT payed_limits FROM limits WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if row:
        payed_limits = row[0]
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ payed_limits –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
        cursor.execute("UPDATE limits SET payed_limits = ? WHERE user_id = ?", (int(payed_limits) + int(package_price), user_id))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

def create_yukassa_payment(amount, description, user_id, package_title):
    Configuration.account_id = YUKASSA_SHOP_ID
    Configuration.secret_key = YUKASSA_SECRET_KEY

    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://kirillporyadin88.pythonanywhere.com",  # URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": user_id,
            "package_title": package_title,
        },
    }, uuid.uuid4())

    return payment


@dp.callback_query_handler(lambda callback_query: callback_query.data == "get_limits")
async def get_limits(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_connection = sqlite3.connect("check_dream.db")
    cursor = db_connection.cursor()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ promo_limits, free_limits –∏ payed_limits
    query = f"SELECT promo_limits, free_limits, payed_limits FROM limits WHERE user_id = ?;"

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()

        if result:
            promo_limits = result[0]
            free_limits = result[1]
            payed_limits = result[2]

            limits_markup = types.InlineKeyboardMarkup(row=1)
            limits_markup.add(buy_button)
            limits_markup.add(cancel_button)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ promo_limits
            if promo_limits > 0:
                # –ï—Å–ª–∏ –µ—Å—Ç—å promo_limits, –≤—ã–≤–æ–¥–∏–º –∏—Ö
                await callback_query.message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å:\n\nüåü –ü—Ä–æ–º–æ-–∑–∞–ø—Ä–æ—Å–æ–≤ - {promo_limits}\n\nüåü –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - {free_limits}\n\nüí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - {payed_limits}", reply_markup=limits_markup)
            else:
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
                await callback_query.message.answer(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å:\n\nüåü –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - {free_limits}\n\nüí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - {payed_limits}", reply_markup=limits_markup)

            await callback_query.answer()
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback_query.answer()
    except Exception as e:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö.")


    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    db_connection.close()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
payment_links = {}

@dp.callback_query_handler(lambda callback_query: callback_query.data == "buy_limits")
async def start_buy_limits(callback_query: types.CallbackQuery):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
    packages = [
        {"title": "1 –∑–∞–ø—Ä–æ—Å", "price": 29},
        {"title": "5 –∑–∞–ø—Ä–æ—Å–æ–≤", "price": 99},
        {"title": "15 –∑–∞–ø—Ä–æ—Å–æ–≤", "price": 199},
        {"title": "30 –∑–∞–ø—Ä–æ—Å–æ–≤", "price": 299},
    ]

    buttons = []

    for package in packages:
        callback_data = f"buy_{package['title']}_{package['price']}"
        button_text = package['title']
        button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
        buttons.append(button)


    keyboard_markup.add(*buttons)
    keyboard_markup.add(promocode_button)
    keyboard_markup.add(cancel_button)

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard_markup)
    await callback_query.answer()


payment_buttons = []
# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
active_tasks = []

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("buy_"))
async def process_buy_callback(callback_query: types.CallbackQuery):

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    global payment_buttons
    if payment_buttons:
        payment_message = payment_buttons.pop()
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=payment_message)

    global active_tasks
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    for task in active_tasks:
        task.cancel()
    active_tasks.clear()


    package_data = callback_query.data.split("_")
    if len(package_data) == 3:
        package_title = package_data[1]
        package_price = int(package_data[2])

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_response = create_yukassa_payment(package_price, f"–ü–æ–∫—É–ø–∫–∞ {package_title}", callback_query.from_user.id, package_title)

        if payment_response.id:
            payment_links[callback_query.from_user.id] = payment_response.confirmation.confirmation_url

            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            button_text = f"–û–ø–ª–∞—Ç–∏—Ç—å {package_title} –∑–∞ {package_price}—Ä."
            payment_button = types.InlineKeyboardButton(button_text, url=payment_links[callback_query.from_user.id])
            payment_markup = types.InlineKeyboardMarkup()
            payment_markup.add(payment_button)
            payment_markup.add(cancel_button)

            payment_message = await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=payment_markup)
            payment_message_id = payment_message.message_id
            payment_buttons.append(payment_message_id)

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
            async def background_payment_task(user_id, package_title, payment_response):
                while True:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                    payment_info = Payment.find_one(payment_response.id)

                    if payment_info.status == 'succeeded':
                        metadata = payment_info.metadata
                        user_id = metadata.get('user_id')
                        package_title = metadata.get('package_title')

                        await bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ {package_title}.")

                        fin_limits = package_title.split()[0]
                        await update_payed_limits(user_id, fin_limits)
                        break
                    elif payment_info.status == 'canceled':
                        await bot.send_message(callback_query.from_user.id, f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.")
                        break
                    elif payment_info.status == 'waiting_for_capture':
                        idempotence_key = str(uuid.uuid4())
                        response = Payment.capture(
                            payment_response.id,
                            {
                                "amount": {
                                    "value": f"{package_price}.00",
                                    "currency": "RUB"
                                }
                            },
                            idempotence_key)
                    else:
                        await asyncio.sleep(1)  # –î–æ–±–∞–≤—å—Ç–µ –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª

            payment_task = asyncio.create_task(background_payment_task(callback_query.from_user.id, package_title, payment_response))
            active_tasks.append(payment_task)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_dream
@dp.callback_query_handler(lambda callback_query: callback_query.data == "get_dream")
async def cmd_set_main(callback_query: types.CallbackQuery, state: FSMContext):
    cancel_markup = types.InlineKeyboardMarkup().add(cancel_button)
    await bot.send_message(callback_query.from_user.id, "‚ú® –û—Ç–∫—Ä–æ–π –º–Ω–µ —Å–≤–æ–∏ –Ω–æ—á–Ω—ã–µ –≤–∏–¥–µ–Ω–∏—è, –∏ —è –æ—Å–≤–µ—Ç–ª—é –∏—Ö —Å–º—ã—Å–ª", reply_markup=cancel_markup)
    await MainMessageInput.waiting_for_dream.set() #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–Ω–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–Ω–∞
@dp.message_handler(state=MainMessageInput.waiting_for_dream, content_types=types.ContentTypes.TEXT)
async def process_message_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await process_user_limits(user_id):
        return

    prompt = f'–ü–æ–º–æ–≥–∏ –∏—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–æ–Ω. –°–µ–≥–æ–¥–Ω—è –º–Ω–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å {message.text} –ö —á–µ–º—É —Å–Ω–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–æ–Ω? –ï—Å–ª–∏ –º–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º–æ–π —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤ –∏–ª–∏ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–ª—å–∑—è –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –º–æ–π –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º–æ–π —Å–Ω–æ–≤–∏–¥–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —ç—Ç–æ–≥–æ —Å–Ω–∞. –¢—Ä–∞–∫—Ç–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–º—ã—Å–ª–æ–º –∏ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ. –ù–µ –ø–∏—à–∏ –∑–∞–ø—É—Ç–∞–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–∏ –≤ —Å–≤–æ–∏—Ö —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞—Ö —Å–Ω–æ–≤. –ü–∏—à–∏ –≤—Å–µ–≥–¥–∞ —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å–ª–æ–≤–∞ –≤ —Å–≤–æ–∏—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è—Ö. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞.'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–∞—á–∞–ª –ø–µ—á–∞—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
    await bot.send_chat_action(message.chat.id, "typing")


    response = chat_with_me(prompt)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    left_limits = await get_user_limits(user_id)

    cancel_markup = types.InlineKeyboardMarkup().add(cancel_button)
    await bot.send_message(user_id, f"{response}\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {left_limits}", reply_markup=cancel_markup)




def chat_with_me(prompt):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
    response = openai.Completion.create(
        engine=model_engine,
        prompt=prompt,
        temperature=0.6,
        max_tokens=2048,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
    if response.choices[0].text.startswith("ERROR:"):
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    return response.choices[0].text.strip()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–º–∏—Ç–æ–≤
async def get_user_limits(user_id):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('check_dream.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã limits –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT free_limits, payed_limits FROM limits WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()

    if row:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        return row[0] if row[0] > 0 else row[1]
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
def validate_time(input_str):
    try:
        hours, minutes = map(int, input_str.split(":"))
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            return True
        else:
            return False
    except ValueError:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def schedule_hello():
    while True:
        await send_hello_to_user()
        await asyncio.sleep(60)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('check_dream.db')
cursor = conn.cursor()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def send_message_and_update(user_id):
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è free_limits –Ω–∞ 2
    cursor.execute("UPDATE limits SET free_limits = free_limits + 2 WHERE user_id = ?", (user_id,))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    message_text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞!"
    inline_button = types.InlineKeyboardButton("–ò—Å—Ç–æ–ª–∫–æ–≤–∞—Ç—å —Å–æ–Ω", callback_data="get_dream")
    markup = types.InlineKeyboardMarkup().add(inline_button)
    await bot.send_message(user_id, message_text, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
async def schedule_free_monthly_limits():
    while True:
        today = datetime.date.today()
        thirty_days_ago = today - datetime.timedelta(days=30)

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT DISTINCT user_id FROM limits WHERE first_input_date = ? AND free_limits <= 3",
                       (thirty_days_ago,))
        user_ids = cursor.fetchall()

        for user_id in user_ids:
            user_id = user_id[0]
            await send_message_and_update(user_id)

        await asyncio.sleep(86400)  # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

loop = asyncio.get_event_loop()
loop.create_task(schedule_hello())
loop.create_task(schedule_free_monthly_limits())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
